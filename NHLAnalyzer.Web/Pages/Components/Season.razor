@page "/Season"

@using System.Diagnostics;
@using AutoMapper;
@using NHLAnalyzer.Data.Entities;
@using NHLAnalyzer.Management.Services.Interfaces;
@using NHLAnalyzer.Web.ViewModels;

@inject IMapper _mapper
@inject IPlayerSeasonService _playerSeasonService
@inject ISeasonService _seasonService

<PageTitle>Player Season</PageTitle>



<RadzenText TextStyle="TextStyle.H4" TextAlign="TextAlign.Center">Regular Season Player Stats</RadzenText>    
<RadzenRow>
    <RadzenColumn Size="12" class="rz-p-2">        
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceEvenly" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Subtitle2">Select Start Season</RadzenText>
                    <RadzenDropDown @bind-Value=@selectedStartSeason Data=@allSeasons Change="@OnStartSeasonSelected" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Subtitle2">Select End Season</RadzenText>
                    <RadzenDropDown @bind-Value=@selectedEndSeason Data=@endSeasonOptions Change="@OnEndSeasonSelected" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>    
</RadzenRow>

<RadzenRow>
    <RadzenColumn Size="12" class="rz-p-2">
        <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced"
                        AllowSorting="true" AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowMultiColumnSorting="true"
                        Data="@playerViewModels" TItem="PlayerSeasonViewModel" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.And">
            <Columns>
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="Name" Title="Name" Frozen="true" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="GamesPlayed" Title="GP" Frozen="true"/>
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="Goals" Title="Goals" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="Assists" Title="Assists" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="PlusMinus" Title="+/-" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="Pims" Title="Pims" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="ShotsOnGoal" Title="SOG" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="GameWinningGoals" Title="GWG" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="PowerPlayGoals" Title="PPG" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="PowerPlayAssists" Title="PPA" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="ShorthandedGoals" Title="SHG" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="ShorthandedAssists" Title="SHA" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="Hits" Title="Hits" />
                <RadzenDataGridColumn TItem="PlayerSeasonViewModel" Property="Blocks" Title="Blocks" />
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>


@code {

    private int selectedStartSeason;
    private int selectedEndSeason;
    private IEnumerable<PlayerSeason> players;
    private IQueryable<PlayerSeasonViewModel> playerViewModels;
    private IEnumerable<int> allSeasons;
    private IEnumerable<int> endSeasonOptions;

    protected override void OnInitialized()
    {
        allSeasons = _seasonService.GetAllSeasonYears();
        selectedStartSeason = allSeasons.FirstOrDefault();
        selectedEndSeason = selectedStartSeason;
        SetEndSeasonOptions();
        SetPlayerList();
    }

    private void OnStartSeasonSelected()
    {
        SetEndSeasonOptions();
        SetPlayerList();
    }

    private void OnEndSeasonSelected()
    {
        SetPlayerList();
    }

    private void OnSearchBoxChange(string value)
    {
        SetPlayerList();
    }   

    private void SetEndSeasonOptions()
    {        
        endSeasonOptions = allSeasons.Where(x => x >= selectedStartSeason);
        if(!endSeasonOptions.Contains(selectedEndSeason))
        {
            selectedEndSeason = selectedStartSeason;
        }
    }

    private void SetPlayerList()
    {
        players = _playerSeasonService.GetPlayerSeasonsBetweenYears(selectedStartSeason, selectedEndSeason).ToList();  

        playerViewModels = selectedStartSeason == selectedEndSeason ? _mapper.Map<IEnumerable<PlayerSeasonViewModel>>(players).AsQueryable() : GroupByPlayer();
    }

    private IQueryable<PlayerSeasonViewModel> GroupByPlayer()
    {
        var returnObject = players.AsQueryable().GroupBy(x => x.Player).Select(p => new PlayerSeasonViewModel()
            {
                Id = p.Key.Id,
                Name = p.Key.PlayerName,
                GamesPlayed = p.Sum(x => x.GamesPlayed),
                Goals = p.Sum(x => x.Goals),
                Assists = p.Sum(x => x.Assists),
                PlusMinus = p.Sum(x => x.PlusMinus),
                Pims = p.Sum(x => x.Pims),
                ShotsOnGoal = p.Sum(x => x.ShotsOnGoal),
                GameWinningGoals = p.Sum(x => x.GameWinningGoals),
                PowerPlayGoals = p.Sum(x => x.PowerPlayGoals),
                PowerPlayAssists = p.Sum(x => x.PowerPlayAssists),
                ShorthandedGoals = p.Sum(x => x.ShorthandedGoals),
                ShorthandedAssists = p.Sum(x => x.ShorthandedAssists),
                Hits = p.Sum(x => x.Hits),
                Blocks = p.Sum(x => x.Blocks),
            });
        return returnObject;
    }
}
